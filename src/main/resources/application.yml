spring:
  application:
    name: hhplus-concert
  profiles:
    active: local
  datasource:
    name: HangHaePlusDataSource
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 3
      connection-timeout: 10000
      max-lifetime: 60000
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    open-in-view: false
    generate-ddl: false
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate.timezone.default_storage: NORMALIZE_UTC
      hibernate.jdbc.time_zone: UTC
  # kafka
  kafka:
    bootstrap-servers: localhost:9092,localhost:9093
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all  # 모든 replica에서 확인 후 응답
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      enable-idempotence: true  # 중복 방지
      properties:
        max.in.flight.requests.per.connection: 5
        retry.backoff.ms: 100
        delivery.timeout.ms: 120000
        request.timeout.ms: 30000
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: hhplus-concert-group
      auto-offset-reset: earliest
      enable-auto-commit: false  # 수동 커밋으로 안정성 확보
      max-poll-records: 100
      fetch-min-size: 1
      fetch-max-wait: 500
      properties:
        spring.json.trusted.packages: "com.hhplus.concert.domain.event"
        session.timeout.ms: 30000
        heartbeat.interval.ms: 3000
        max.poll.interval.ms: 300000
    listener:
      ack-mode: manual_immediate  # 메시지 처리 후 즉시 커밋
      concurrency: 3  # 컨슈머 스레드 수
      poll-timeout: 3000
      missing-topics-fatal: false
redisson:
  config:
    singleServerConfig:
      address: "redis://localhost:6379"
    
server:
  port: 8080
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      endpoint:
        health:
          show-details: always
        metrics:
          enabled: true
        prometheus:
          enabled: true
      metrics:
        export:
          prometheus:
            enabled: true
        distribution:
          percentiles-histogram:
            http.server.requests: true
          percentiles:
            http.server.requests: 0.5, 0.95, 0.99
        tags:
          application: ${spring.application.name:concert-app}

---
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/hhplus?characterEncoding=UTF-8&serverTimezone=UTC
    username: application
    password: application
  redis:
    host: localhost
    port: 6379
  application:
    name: concert-app

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationSorter: method
